{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","title":"Home"},{"location":"#_1","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"},{"location":"lr1/","text":"\u041b\u0420 \u21161 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Fast Api. \u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u0440\u0430. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b: project/ \u2502 \u251c\u2500\u2500 auth \u2502 \u2514\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 priority.py \u2502 \u251c\u2500\u2500 project.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 task.py \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 routers \u2502 \u251c\u2500\u2500 priority.py \u2502 \u251c\u2500\u2500 project.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 task.py \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 db.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 ... \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043f\u0430\u043f\u043a\u0435 models \u043b\u0435\u0436\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432 routers - end-point`\u044b, \u0432 db \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 main \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. Main \u0412 \u0444\u0430\u0439\u043b\u0435 main.py \u043b\u0435\u0436\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c\u0438 \u0438\u0437 \u043f\u0430\u043f\u043a\u0438 routers. from fastapi import FastAPI import db from routers import * from models import * app = FastAPI() app.include_router(task_router) app.include_router(tag_router) app.include_router(priority_router) app.include_router(project_router) app.include_router(user_router) @app.on_event(\"startup\") def on_startup(): db.init_db() if __name__ == \"__main__\": import uvicorn uvicorn.run(app, port=3000) db \u0412 \u0444\u0430\u0439\u043b\u0435 db.py \u043b\u0435\u0436\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u044e \u0441 \u043d\u0435\u0439: from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session models \u0412 \u043f\u0430\u043f\u043a\u0435 models \u043b\u0435\u0436\u0430\u0442 \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0430\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 task.py: from typing import TYPE_CHECKING, Optional, List from datetime import date from sqlmodel import SQLModel, Field, Relationship from .tag import TagTaskLink from .priority import Priority from .tag import Tag if TYPE_CHECKING: from .project import Project class TaskDefault(SQLModel): title: str description: str dueTo: date createdAt: None | date = date.today() priority_id: Optional[int] = Field(default=None, foreign_key=\"priority.id\") project_id: Optional[int] = Field(default=None, foreign_key=\"project.id\") class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) priority: Optional[\"Priority\"] = Relationship(back_populates=\"tasks_priority\") tags: Optional[List[\"Tag\"]] | None = Relationship(back_populates=\"tasks\", link_model=TagTaskLink) project: Optional[\"Project\"] = Relationship(back_populates=\"project_tasks\") class TaskOut(TaskDefault): id: int priority: Optional[Priority] = None tags: Optional[List[Tag]] = None routers \u0412 \u043f\u0430\u043f\u043a\u0435 routers \u043b\u0435\u0436\u0430\u0442 \u0432\u0441\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u043e\u0439, \u0440\u0430\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 models: ./routers/task.py from fastapi import APIRouter, Depends from db import get_session from typing import List, NotRequired from typing_extensions import TypedDict from sqlmodel import select from models.task import * router = APIRouter() @router.get(\"/task\") def tasks_get(session = Depends(get_session)) -> List[Task]: statement = select(Task).order_by(Task.id) return session.exec(statement).all() @router.get(\"/task/{task_id}\") def task_get(task_id: int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[TaskOut]}): task = session.get(Task, task_id) if not task: return {\"status\": 404} return {\"status\": 200, \"data\": task} @router.post(\"/task\") def task_post(task: TaskDefault, session = Depends(get_session)): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 201, \"data\": task} @router.put(\"/task/{task_id}\") def task_update(task: TaskDefault, task_id:int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[Task]}): task_to_update = session.get(Task, task_id) if not task_to_update: return {\"status\": 404} task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(task_to_update, key, value) session.add(task_to_update) session.commit() session.refresh(task_to_update) return {\"status\": 201, \"data\": task_to_update} @router.delete(\"/task/{task_id}\") def task_delete(task_id: int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[Task]}): task_to_delete = session.get(Task, task_id) if not task_to_delete: return {\"status\": 404} session.delete(task_to_delete) session.commit() return {\"status\": 201, \"data\": task_to_delete}","title":"Lab1"},{"location":"lr1/#no1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Fast Api. \u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u0440\u0430. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b: project/ \u2502 \u251c\u2500\u2500 auth \u2502 \u2514\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 priority.py \u2502 \u251c\u2500\u2500 project.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 task.py \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 routers \u2502 \u251c\u2500\u2500 priority.py \u2502 \u251c\u2500\u2500 project.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 task.py \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 db.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 ... \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043f\u0430\u043f\u043a\u0435 models \u043b\u0435\u0436\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432 routers - end-point`\u044b, \u0432 db \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 main \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.","title":"\u041b\u0420 \u21161"},{"location":"lr1/#main","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 main.py \u043b\u0435\u0436\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c\u0438 \u0438\u0437 \u043f\u0430\u043f\u043a\u0438 routers. from fastapi import FastAPI import db from routers import * from models import * app = FastAPI() app.include_router(task_router) app.include_router(tag_router) app.include_router(priority_router) app.include_router(project_router) app.include_router(user_router) @app.on_event(\"startup\") def on_startup(): db.init_db() if __name__ == \"__main__\": import uvicorn uvicorn.run(app, port=3000)","title":"Main"},{"location":"lr1/#db","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 db.py \u043b\u0435\u0436\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u044e \u0441 \u043d\u0435\u0439: from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"db"},{"location":"lr1/#models","text":"\u0412 \u043f\u0430\u043f\u043a\u0435 models \u043b\u0435\u0436\u0430\u0442 \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0430\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 task.py: from typing import TYPE_CHECKING, Optional, List from datetime import date from sqlmodel import SQLModel, Field, Relationship from .tag import TagTaskLink from .priority import Priority from .tag import Tag if TYPE_CHECKING: from .project import Project class TaskDefault(SQLModel): title: str description: str dueTo: date createdAt: None | date = date.today() priority_id: Optional[int] = Field(default=None, foreign_key=\"priority.id\") project_id: Optional[int] = Field(default=None, foreign_key=\"project.id\") class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) priority: Optional[\"Priority\"] = Relationship(back_populates=\"tasks_priority\") tags: Optional[List[\"Tag\"]] | None = Relationship(back_populates=\"tasks\", link_model=TagTaskLink) project: Optional[\"Project\"] = Relationship(back_populates=\"project_tasks\") class TaskOut(TaskDefault): id: int priority: Optional[Priority] = None tags: Optional[List[Tag]] = None","title":"models"},{"location":"lr1/#routers","text":"\u0412 \u043f\u0430\u043f\u043a\u0435 routers \u043b\u0435\u0436\u0430\u0442 \u0432\u0441\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u043e\u0439, \u0440\u0430\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 models: ./routers/task.py from fastapi import APIRouter, Depends from db import get_session from typing import List, NotRequired from typing_extensions import TypedDict from sqlmodel import select from models.task import * router = APIRouter() @router.get(\"/task\") def tasks_get(session = Depends(get_session)) -> List[Task]: statement = select(Task).order_by(Task.id) return session.exec(statement).all() @router.get(\"/task/{task_id}\") def task_get(task_id: int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[TaskOut]}): task = session.get(Task, task_id) if not task: return {\"status\": 404} return {\"status\": 200, \"data\": task} @router.post(\"/task\") def task_post(task: TaskDefault, session = Depends(get_session)): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 201, \"data\": task} @router.put(\"/task/{task_id}\") def task_update(task: TaskDefault, task_id:int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[Task]}): task_to_update = session.get(Task, task_id) if not task_to_update: return {\"status\": 404} task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(task_to_update, key, value) session.add(task_to_update) session.commit() session.refresh(task_to_update) return {\"status\": 201, \"data\": task_to_update} @router.delete(\"/task/{task_id}\") def task_delete(task_id: int, session = Depends(get_session)) -> TypedDict(\"Response\", {\"status\": int, \"data\":NotRequired[Task]}): task_to_delete = session.get(Task, task_id) if not task_to_delete: return {\"status\": 404} session.delete(task_to_delete) session.commit() return {\"status\": 201, \"data\": task_to_delete}","title":"routers"},{"location":"lr2/","text":"\u041b\u0420 \u21162 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043f\u0430\u0440\u0441\u0435\u0440, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 python \u043f\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447 \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 python, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432. Threading \u0420\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. import threading from time import time first_number = 1 last_number = 1000000 NUMBER_OF_THREADS = 4 NUMBERS_FOR_THREAD = last_number // NUMBER_OF_THREADS results = [0] * NUMBER_OF_THREADS # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e def calculate_sum(start: int, end: int): return sum(range(start, end+1)) # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432 \u0441\u0432\u043e\u044e \u044f\u0447\u0435\u0439\u043a\u0443 results def worker(i: int): results[i] = calculate_sum(NUMBERS_FOR_THREAD * i + 1, NUMBERS_FOR_THREAD * (i + 1)) # \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a def thread_calculate_sum(): threads = [] for i in range(NUMBER_OF_THREADS): thread = threading.Thread(target=worker, args=(i,)) threads.append(thread) thread.start() for thread in threads: thread.join() print(\"Result(thread): \" + str(sum(results))) def non_thread_calculate_sum(): calculate_sum(first_number, last_number) print(\"Result(non thread): \" + str(sum(results))) if __name__ == \"__main__\": n_tests = 10 times = [] for i in range(n_tests): start = time() thread_calculate_sum() end = time() times.append(end-start) result_avg_time = sum(times)/n_tests print(\"AVG time: \" + str(result_avg_time)) times = [] for i in range(n_tests): start = time() non_thread_calculate_sum() end = time() times.append(end-start) result_avg_time = sum(times)/n_tests print(\"AVG time: \" + str(result_avg_time)) \u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c, \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044e \u0441\u0443\u043c\u043c\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u0439 \u0436\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043d\u043e \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u044b \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u0447\u0451\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0439, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u044b \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0415\u0441\u043b\u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 multiprocessing \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043b\u0443\u0447\u0448\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043d\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0432\u043e\u0451 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u043c \u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441 \u0441\u0430\u0439\u0442\u0430. \u041f\u0430\u0440\u0441\u0435\u0440: # Ebay def pars_item_ebay(item): title_tag = item.find('div', class_=\"s-item__title\") title_span = title_tag.find('span', role='heading') title_text = title_span.get_text() price_tag = item.find('span', class_='s-item__price') price_text = price_tag.get_text() return {'title': title_text, 'price': price_text} def insert_into_db(parsed_items): conn = psycopg2.connect(db_url) cursor = conn.cursor() for item in parsed_items: try: cursor.execute('''INSERT INTO items (name, price) VALUES (%s, %s)''', (item[\"title\"], item[\"price\"])) except: continue conn.commit() cursor.close() conn.close() def parse_and_save(url): items = [] while items == []: print(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\") try: response = requests.get(url) print(\"Status code: \" + str(response.status_code)) response.raise_for_status() except requests.exceptions.RequestException as e: print(f\"Error req: {url}\\n{e}\") soup = BeautifulSoup(response.text, 'html.parser') # Avito #items = soup.find_all('div', class_='iva-item-body-GQomw') # Ebay items = soup.find_all('li', class_='s-item') if items == []: print(\"\u041d\u0435 \u043d\u0430\u0448\u043b\u0438\u0441\u044c items\") f = open(\"test_results.txt\", 'w', encoding=\"utf-8\") f.write(str(soup)) f.close() return 0 parsed_items = [] for item in items: # Avito #item_res = pars_item_avito(item) # Ebay item_res = pars_item_ebay(item) parsed_items.append(item_res) #print(parsed_items) insert_into_db(parsed_items) asyncio \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0443\u043b\u0435\u043c asyncio import asyncio import aiohttp from time import time from bs4 import BeautifulSoup from parsing import URLS2, pars_item_ebay, insert_into_db async def fetch(session, url): async with session.get(url) as response: print(\"Status code: \" + str(response.status)) return await response.text() async def parse_and_save(session, url): print(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\") try: text = await fetch(session, url) except aiohttp.ClientError as e: print(f\"Error req: {url}\\n{e}\") soup = BeautifulSoup(text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item_ebay(item) parsed_items.append(item_res) insert_into_db(parsed_items) async def main(urls): async with aiohttp.ClientSession() as session: tasks = [] for url in urls: task = parse_and_save(session, url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start = time() asyncio.run(main(URLS2)) end = time() print(\"Time: \" + str(end - start)) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0437\u0430 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435 \u0432\u0440\u0435\u043c\u044f, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0443 asyncio.","title":"Lab2"},{"location":"lr2/#no2","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043f\u0430\u0440\u0441\u0435\u0440, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 python \u043f\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447 \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.","title":"\u041b\u0420 \u21162"},{"location":"lr2/#_1","text":"\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 python, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432.","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"lr2/#threading","text":"\u0420\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. import threading from time import time first_number = 1 last_number = 1000000 NUMBER_OF_THREADS = 4 NUMBERS_FOR_THREAD = last_number // NUMBER_OF_THREADS results = [0] * NUMBER_OF_THREADS # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 start \u0434\u043e end \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e def calculate_sum(start: int, end: int): return sum(range(start, end+1)) # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432 \u0441\u0432\u043e\u044e \u044f\u0447\u0435\u0439\u043a\u0443 results def worker(i: int): results[i] = calculate_sum(NUMBERS_FOR_THREAD * i + 1, NUMBERS_FOR_THREAD * (i + 1)) # \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a def thread_calculate_sum(): threads = [] for i in range(NUMBER_OF_THREADS): thread = threading.Thread(target=worker, args=(i,)) threads.append(thread) thread.start() for thread in threads: thread.join() print(\"Result(thread): \" + str(sum(results))) def non_thread_calculate_sum(): calculate_sum(first_number, last_number) print(\"Result(non thread): \" + str(sum(results))) if __name__ == \"__main__\": n_tests = 10 times = [] for i in range(n_tests): start = time() thread_calculate_sum() end = time() times.append(end-start) result_avg_time = sum(times)/n_tests print(\"AVG time: \" + str(result_avg_time)) times = [] for i in range(n_tests): start = time() non_thread_calculate_sum() end = time() times.append(end-start) result_avg_time = sum(times)/n_tests print(\"AVG time: \" + str(result_avg_time)) \u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c, \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044e \u0441\u0443\u043c\u043c\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u0439 \u0436\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043d\u043e \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u044b \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u0447\u0451\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0439, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u044b \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0415\u0441\u043b\u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 multiprocessing \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043b\u0443\u0447\u0448\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043d\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0432\u043e\u0451 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e.","title":"Threading"},{"location":"lr2/#_2","text":"\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441 \u0441\u0430\u0439\u0442\u0430. \u041f\u0430\u0440\u0441\u0435\u0440: # Ebay def pars_item_ebay(item): title_tag = item.find('div', class_=\"s-item__title\") title_span = title_tag.find('span', role='heading') title_text = title_span.get_text() price_tag = item.find('span', class_='s-item__price') price_text = price_tag.get_text() return {'title': title_text, 'price': price_text} def insert_into_db(parsed_items): conn = psycopg2.connect(db_url) cursor = conn.cursor() for item in parsed_items: try: cursor.execute('''INSERT INTO items (name, price) VALUES (%s, %s)''', (item[\"title\"], item[\"price\"])) except: continue conn.commit() cursor.close() conn.close() def parse_and_save(url): items = [] while items == []: print(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\") try: response = requests.get(url) print(\"Status code: \" + str(response.status_code)) response.raise_for_status() except requests.exceptions.RequestException as e: print(f\"Error req: {url}\\n{e}\") soup = BeautifulSoup(response.text, 'html.parser') # Avito #items = soup.find_all('div', class_='iva-item-body-GQomw') # Ebay items = soup.find_all('li', class_='s-item') if items == []: print(\"\u041d\u0435 \u043d\u0430\u0448\u043b\u0438\u0441\u044c items\") f = open(\"test_results.txt\", 'w', encoding=\"utf-8\") f.write(str(soup)) f.close() return 0 parsed_items = [] for item in items: # Avito #item_res = pars_item_avito(item) # Ebay item_res = pars_item_ebay(item) parsed_items.append(item_res) #print(parsed_items) insert_into_db(parsed_items)","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u043c"},{"location":"lr2/#asyncio","text":"\u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0443\u043b\u0435\u043c asyncio import asyncio import aiohttp from time import time from bs4 import BeautifulSoup from parsing import URLS2, pars_item_ebay, insert_into_db async def fetch(session, url): async with session.get(url) as response: print(\"Status code: \" + str(response.status)) return await response.text() async def parse_and_save(session, url): print(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\") try: text = await fetch(session, url) except aiohttp.ClientError as e: print(f\"Error req: {url}\\n{e}\") soup = BeautifulSoup(text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item_ebay(item) parsed_items.append(item_res) insert_into_db(parsed_items) async def main(urls): async with aiohttp.ClientSession() as session: tasks = [] for url in urls: task = parse_and_save(session, url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start = time() asyncio.run(main(URLS2)) end = time() print(\"Time: \" + str(end - start)) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0437\u0430 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435 \u0432\u0440\u0435\u043c\u044f, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0443 asyncio.","title":"asyncio"},{"location":"lr3/","text":"\u041b\u0420 \u21163 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u043d\u0440\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastpApi \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Docker. Dockerfile \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0431\u044b\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e\u043a\u0435\u0440 \u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f FastApi \u0438 \u041f\u0430\u0440\u0441\u0435\u0440\u0430. FastApi: FROM python:3.12 WORKDIR /app COPY req.txt . RUN pip install --no-cache-dir -r req.txt COPY . . ENV PYTHONPATH=/app CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"] \u041f\u0430\u0440\u0441\u0435\u0440: FROM python:3.12 WORKDIR /app COPY req.txt . RUN pip install --no-cache-dir -r req.txt COPY . . ENV PYTHONPATH=/app CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"] Docker-compose \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0431\u044b\u043b \u043e\u043f\u0438\u0441\u0430\u043d \u0444\u0430\u0439\u043b docker-compose: services: lr1: container_name: lr1 build: ./../\u041b\u04201/\u041b\u0420 depends_on: - db ports: - 3000:3000 restart: always env_file: - ./../\u041b\u04201/\u041b\u0420/.env lr3: container_name: lr3 build: . depends_on: - db ports: - 3001:3001 restart: always env_file: - .env db: container_name: postgres image: postgres environment: - POSTGRES_DB=lr1 - POSTGRES_USER=postgres - POSTGRES_PASSWORD=1 ports: - 5432:5432 restart: always redis: image: redis:7 ports: - \"6379:6379\" celery_worker: build: . command: celery -A celeryTask worker --loglevel=info depends_on: - redis - db flower: build: context: . container_name: flower_app command: celery -A celeryTask flower depends_on: - redis - celery_worker ports: - 5555:5555 \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043c\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438. Celery \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Celery \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f redis. Celery: from celery import Celery from celery.utils.log import get_task_logger from asynctask import main import asyncio logger = get_task_logger(__name__) celery = Celery('worker', broker='redis://redis:6379') @celery.task def parse_and_save(urls): logger.info(f\"Started task with URLs: {urls}\") loop = asyncio.get_event_loop() loop.run_until_complete(main(urls)) logger.info(f\"Completed task with URLs: {urls}\") \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 Celery \u0421\u043e\u0437\u0434\u0430\u0451\u043c end-point, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0448 celery: @app.get(\"/celery\") def test(url: str): urls = [url] results = parse_and_save_celery.apply_async(args=[urls]) return {\"message\": \"Parsing started\"} \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u043d\u0430 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f, \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e flower, \u043f\u0435\u0440\u0435\u0439\u0434\u044f \u043d\u0430 localhost:5555/tasks","title":"Lab3"},{"location":"lr3/#no3","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u043d\u0440\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastpApi \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Docker.","title":"\u041b\u0420 \u21163"},{"location":"lr3/#dockerfile","text":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0431\u044b\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e\u043a\u0435\u0440 \u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f FastApi \u0438 \u041f\u0430\u0440\u0441\u0435\u0440\u0430. FastApi: FROM python:3.12 WORKDIR /app COPY req.txt . RUN pip install --no-cache-dir -r req.txt COPY . . ENV PYTHONPATH=/app CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"] \u041f\u0430\u0440\u0441\u0435\u0440: FROM python:3.12 WORKDIR /app COPY req.txt . RUN pip install --no-cache-dir -r req.txt COPY . . ENV PYTHONPATH=/app CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"]","title":"Dockerfile"},{"location":"lr3/#docker-compose","text":"\u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0431\u044b\u043b \u043e\u043f\u0438\u0441\u0430\u043d \u0444\u0430\u0439\u043b docker-compose: services: lr1: container_name: lr1 build: ./../\u041b\u04201/\u041b\u0420 depends_on: - db ports: - 3000:3000 restart: always env_file: - ./../\u041b\u04201/\u041b\u0420/.env lr3: container_name: lr3 build: . depends_on: - db ports: - 3001:3001 restart: always env_file: - .env db: container_name: postgres image: postgres environment: - POSTGRES_DB=lr1 - POSTGRES_USER=postgres - POSTGRES_PASSWORD=1 ports: - 5432:5432 restart: always redis: image: redis:7 ports: - \"6379:6379\" celery_worker: build: . command: celery -A celeryTask worker --loglevel=info depends_on: - redis - db flower: build: context: . container_name: flower_app command: celery -A celeryTask flower depends_on: - redis - celery_worker ports: - 5555:5555 \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043c\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438.","title":"Docker-compose"},{"location":"lr3/#celery","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Celery \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f redis. Celery: from celery import Celery from celery.utils.log import get_task_logger from asynctask import main import asyncio logger = get_task_logger(__name__) celery = Celery('worker', broker='redis://redis:6379') @celery.task def parse_and_save(urls): logger.info(f\"Started task with URLs: {urls}\") loop = asyncio.get_event_loop() loop.run_until_complete(main(urls)) logger.info(f\"Completed task with URLs: {urls}\")","title":"Celery"},{"location":"lr3/#celery_1","text":"\u0421\u043e\u0437\u0434\u0430\u0451\u043c end-point, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0448 celery: @app.get(\"/celery\") def test(url: str): urls = [url] results = parse_and_save_celery.apply_async(args=[urls]) return {\"message\": \"Parsing started\"} \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u043d\u0430 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f, \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e flower, \u043f\u0435\u0440\u0435\u0439\u0434\u044f \u043d\u0430 localhost:5555/tasks","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 Celery"}]}